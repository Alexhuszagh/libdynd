//
// Copyright (C) 2011-14 Irwin Zaid, DyND Developers
// BSD 2-Clause License, see LICENSE.txt
//

#ifndef _DYND__SPECIAL_VALS_HPP_
#define _DYND__SPECIAL_VALS_HPP_

#include <dynd/array.hpp>
#include <dynd/types/tuple_type.hpp>

namespace dynd {

inline nd::array airy_vals() {
    static double x[11] = {0.0E+00, 0.1E+00, 0.2E+00, 0.3E+00, 0.4E+00, 0.5E+00, 0.6E+00,
        0.7E+00, 0.8E+00, 0.9E+00, 1.0E+00};
    static double ai[11] = {0.3550280538878172E+00, 0.3292031299435381E+00, 0.3037031542863820E+00,
        0.2788064819550049E+00, 0.2547423542956763E+00, 0.2316936064808335E+00, 0.2098000616663795E+00,
        0.1891624003981501E+00, 0.1698463174443649E+00, 0.1518868036405444E+00, 0.1352924163128814E+00};
    static double aip[11] = {-0.2588194037928068E+00, -0.2571304219075862E+00, -0.2524054702856195E+00,
        -0.2451463642190548E+00, -0.2358320344192082E+00, -0.2249105326646839E+00, -0.2127932593891585E+00,
        -0.1998511915822805E+00, -0.1864128638072717E+00, -0.1727638434616347E+00, -0.1591474412967932E+00};
    static double bi[11] = {0.6149266274460007E+00, 0.6598616901941892E+00, 0.7054642029186612E+00,
        0.7524855850873156E+00, 0.8017730000135972E+00, 0.8542770431031555E+00, 0.9110633416949405E+00,
        0.9733286558781659E+00, 0.1042422171231561E+01, 0.1119872813134447E+01, 0.1207423594952871E+01};
    static double bip[11] = {0.4482883573538264E+00, 0.4515126311496465E+00, 0.4617892843621509E+00,
        0.4800490287524480E+00, 0.5072816760506224E+00, 0.5445725641405923E+00, 0.5931444786342857E+00,
        0.6544059191721400E+00, 0.7300069016152518E+00, 0.8219038903072090E+00, 0.9324359333927756E+00};

    nd::array vals = nd::make_strided_array(5, 11, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = ai;
    vals(2).vals() = aip;
    vals(3).vals() = bi;
    vals(4).vals() = bip;

    return vals;
}

inline nd::array bessel_j0_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double j0[21] = {-0.1775967713143383E+00, -0.3971498098638474E+00, -0.2600519549019334E+00,
        0.2238907791412357E+00, 0.7651976865579666E+00, 0.1000000000000000E+01, 0.7651976865579666E+00,
        0.2238907791412357E+00, -0.2600519549019334E+00, -0.3971498098638474E+00, -0.1775967713143383E+00,
        0.1506452572509969E+00, 0.3000792705195556E+00, 0.1716508071375539E+00, -0.9033361118287613E-01,
        -0.2459357644513483E+00, -0.1711903004071961E+00, 0.4768931079683354E-01, 0.2069261023770678E+00,
        0.1710734761104587E+00, -0.1422447282678077E-01};

    nd::array vals = nd::make_strided_array(21, ndt::make_tuple(ndt::make_type<double>(), ndt::make_type<double>()));
    vals(irange(), 0).vals() = x;
    vals(irange(), 1).vals() = j0;

    return vals;
}

inline nd::array bessel_j1_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double j1[21] = {0.3275791375914652E+00, 0.6604332802354914E-01, -0.3390589585259365E+00,
        -0.5767248077568734E+00, -0.4400505857449335E+00, 0.0000000000000000E+00, 0.4400505857449335E+00,
        0.5767248077568734E+00, 0.3390589585259365E+00, -0.6604332802354914E-01, -0.3275791375914652E+00,
        -0.2766838581275656E+00, -0.4682823482345833E-02, 0.2346363468539146E+00, 0.2453117865733253E+00,
        0.4347274616886144E-01, -0.1767852989567215E+00, -0.2234471044906276E+00, -0.7031805212177837E-01,
        0.1333751546987933E+00, 0.2051040386135228E+00};

    nd::array vals = nd::make_strided_array(2, 21, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = j1;

    return vals;
}

template <typename T>
nd::array bessel_j_vals();

template <>
inline nd::array bessel_j_vals<int>() {
    static int n[20] = {2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10,
        20, 20, 20, 20, 20};
    static double x[20] = {1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00,
        2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00,
        50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00};
    static double j[20] = {0.1149034849319005E+00, 0.3528340286156377E+00, 0.4656511627775222E-01,
        0.2546303136851206E+00, -0.5971280079425882E-01, 0.2497577302112344E-03,
        0.7039629755871685E-02, 0.2611405461201701E+00, -0.2340615281867936E+00,
        -0.8140024769656964E-01, 0.2630615123687453E-09, 0.2515386282716737E-06,
        0.1467802647310474E-02, 0.2074861066333589E+00, -0.1138478491494694E+00,
        0.3873503008524658E-24, 0.3918972805090754E-18, 0.2770330052128942E-10,
        0.1151336924781340E-04, -0.1167043527595797E+00};

    nd::array vals = nd::make_strided_array(3, 20, ndt::make_type<double>());
    vals(0).vals() = n;
    vals(1).vals() = x;
    vals(2).vals() = j;

    return vals;
}

template <>
inline nd::array bessel_j_vals<double>() {
    static double nu[28] = {0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00,
        0.50E+00, 0.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 2.50E+00,
        2.50E+00, 2.50E+00, 2.50E+00, 2.50E+00, 1.25E+00, 1.25E+00, 1.25E+00, 1.25E+00,
        1.25E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00};
    static double x[28] = {0.2E+00, 1.0E+00, 2.0E+00, 2.5E+00, 3.0E+00, 5.0E+00,
        10.0E+00, 20.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00,
        2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00,
        50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00};
    static double j[28] = {0.3544507442114011E+00, 0.6713967071418031E+00, 0.5130161365618278E+00,
        0.3020049060623657E+00, 0.06500818287737578E+00, -0.3421679847981618E+00,
       -0.1372637357550505E+00, 0.1628807638550299E+00, 0.2402978391234270E+00,
        0.4912937786871623E+00, -0.1696513061447408E+00, 0.1979824927558931E+00,
       -0.1094768729883180E+00, 0.04949681022847794E+00, 0.2239245314689158E+00,
        0.2403772011113174E+00, 0.1966584835818184E+00, 0.02303721950962553E+00,
        0.3314145508558904E+00, 0.5461734240402840E+00, -0.2616584152094124E+00,
        0.1296035513791289E+00, -0.1117432171933552E+00, 0.03142623570527935E+00,
        0.1717922192746527E+00, 0.3126634069544786E+00, 0.1340289119304364E+00,
        0.06235967135106445E+00};

    nd::array vals = nd::make_strided_array(3, 28, ndt::make_type<double>());
    vals(0).vals() = nu;
    vals(1).vals() = x;
    vals(2).vals() = j;

    return vals;
}

inline nd::array bessel_y0_vals() {
    static double x[16] = {0.1E+00, 1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00,
        7.0E+00, 8.0E+00, 9.0E+00, 10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double y0[16] = {-0.1534238651350367E+01, 0.8825696421567696E-01, 0.5103756726497451E+00,
        0.3768500100127904E+00, -0.1694073932506499E-01, -0.3085176252490338E+00, -0.2881946839815792E+00,
        -0.2594974396720926E-01, 0.2235214893875662E+00, 0.2499366982850247E+00, 0.5567116728359939E-01,
        -0.1688473238920795E+00, -0.2252373126343614E+00, -0.7820786452787591E-01, 0.1271925685821837E+00,
        0.2054642960389183E+00};

    nd::array vals = nd::make_strided_array(2, 16, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = y0;

    return vals;
}

inline nd::array bessel_y1_vals() {
    static double x[16] = {0.1E+00, 1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00,
        7.0E+00, 8.0E+00, 9.0E+00, 10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double y1[16] = {-0.6458951094702027E+01, -0.7812128213002887E+00, -0.1070324315409375E+00,
        0.3246744247918000E+00, 0.3979257105571000E+00, 0.1478631433912268E+00, -0.1750103443003983E+00,
        -0.3026672370241849E+00, -0.1580604617312475E+00, 0.1043145751967159E+00, 0.2490154242069539E+00,
        0.1637055374149429E+00, -0.5709921826089652E-01, -0.2100814084206935E+00, -0.1666448418561723E+00,
        0.2107362803687351E-01};

    nd::array vals = nd::make_strided_array(2, 16, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = y1;

    return vals;
}

template <typename T>
nd::array bessel_y_vals();

template <>
inline nd::array bessel_y_vals<int>() {
    static int n[20] = {2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20};
    static double x[20] = {1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00,
        2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00,
        50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00};
    static double y[20] = {-0.1650682606816254E+01, -0.6174081041906827E+00, 0.3676628826055245E+00,
        -0.5868082442208615E-02, 0.9579316872759649E-01, -0.2604058666258122E+03, -0.9935989128481975E+01,
        -0.4536948224911019E+00, 0.1354030476893623E+00, -0.7854841391308165E-01, -0.1216180142786892E+09,
        -0.1291845422080393E+06, -0.2512911009561010E+02, -0.3598141521834027E+00, 0.5723897182053514E-02,
        -0.4113970314835505E+23, -0.4081651388998367E+17, -0.5933965296914321E+09, -0.1597483848269626E+04,
        0.1644263394811578E-01};

    nd::array vals = nd::make_strided_array(3, 20, ndt::make_type<double>());
    vals(0).vals() = n;
    vals(1).vals() = x;
    vals(2).vals() = y;

    return vals;
}

template <>
inline nd::array bessel_y_vals<double>() {
    static double nu[28] = {0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00,
        0.50E+00, 0.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 2.50E+00,
        2.50E+00, 2.50E+00, 2.50E+00, 2.50E+00, 1.25E+00, 1.25E+00, 1.25E+00, 1.25E+00,
        1.25E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00};
    static double x[28] = {0.2E+00, 1.0E+00, 2.0E+00, 2.5E+00, 3.0E+00, 5.0E+00, 10.0E+00,
        20.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00,
        10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00,
        5.0E+00, 10.0E+00, 50.0E+00};
    static double y[28] = {-1.748560416961876E+00, -0.4310988680183761E+00, 0.2347857104062485E+00,
        0.4042783022390569E+00, 0.4560488207946332E+00, -0.1012177091851084E+00, 0.2117088663313982E+00,
        -0.07280690478506185E+00, -1.102495575160179E+00, -0.3956232813587035E+00, 0.3219244429611401E+00,
        0.1584346223881903E+00, 0.02742813676191382E+00, -2.876387857462161E+00, -0.8282206324443037E+00,
        0.2943723749617925E+00, -0.1641784796149411E+00, 0.1105304445562544E+00, -0.9319659251969881E+00,
        -0.2609445010948933E+00, 0.2492796362185881E+00, 0.2174410301416733E+00, -0.01578576650557229E+00,
        -4.023453301501028E+00, -0.9588998694752389E+00, 0.2264260361047367E+00, -0.2193617736566760E+00,
        0.09413988344515077E+00};

    nd::array vals = nd::make_strided_array(3, 28, ndt::make_type<double>());
    vals(0).vals() = nu;
    vals(1).vals() = x;
    vals(2).vals() = y;

    return vals;
}

inline nd::array gamma_vals() {
    static double x[25] = {-0.50E+00, -0.01E+00, 0.01E+00, 0.10E+00, 0.20E+00, 0.40E+00,
        0.50E+00, 0.60E+00, 0.80E+00, 1.00E+00, 1.10E+00, 1.20E+00, 1.30E+00, 1.40E+00,
        1.50E+00, 1.60E+00, 1.70E+00, 1.80E+00, 1.90E+00, 2.00E+00, 3.00E+00, 4.00E+00,
        10.00E+00, 20.00E+00, 30.00E+00};
    static double ga[25] = {-0.3544907701811032E+01, -0.1005871979644108E+03, 0.9943258511915060E+02,
        0.9513507698668732E+01, 0.4590843711998803E+01, 0.2218159543757688E+01, 0.1772453850905516E+01,
        0.1489192248812817E+01, 0.1164229713725303E+01, 0.1000000000000000E+01, 0.9513507698668732E+00,
        0.9181687423997606E+00, 0.8974706963062772E+00, 0.8872638175030753E+00, 0.8862269254527580E+00,
        0.8935153492876903E+00, 0.9086387328532904E+00, 0.9313837709802427E+00, 0.9617658319073874E+00,
        0.1000000000000000E+01, 0.2000000000000000E+01, 0.6000000000000000E+01, 0.3628800000000000E+06,
        0.1216451004088320E+18, 0.8841761993739702E+31};

    nd::array vals = nd::make_strided_array(2, 25, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = ga;

    return vals;
}

inline nd::array lgamma_vals() {
    static double x[20] = {0.20E+00, 0.40E+00, 0.60E+00, 0.80E+00, 1.00E+00, 1.10E+00, 1.20E+00,
        1.30E+00, 1.40E+00, 1.50E+00, 1.60E+00, 1.70E+00, 1.80E+00, 1.90E+00, 2.00E+00, 3.00E+00,
        4.00E+00, 10.00E+00, 20.00E+00, 30.00E+00};
    static double lga[20] = {0.1524063822430784E+01, 0.7966778177017837E+00, 0.3982338580692348E+00,
        0.1520596783998375E+00, 0.0000000000000000E+00, -0.4987244125983972E-01, -0.8537409000331584E-01,
        -0.1081748095078604E+00, -0.1196129141723712E+00, -0.1207822376352452E+00, -0.1125917656967557E+00,
        -0.9580769740706586E-01, -0.7108387291437216E-01, -0.3898427592308333E-01, 0.00000000000000000E+00,
        0.69314718055994530E+00, 0.17917594692280550E+01, 0.12801827480081469E+02, 0.39339884187199494E+02,
        0.71257038967168009E+02};

    nd::array vals = nd::make_strided_array(2, 20, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = lga;

    return vals;
}

inline nd::array sph_bessel_j0_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double sph_j0[21] = {-1.9178485493262769E-01, -1.8920062382698206E-01, 4.7040002686622407E-02,
        4.5464871341284085E-01, 8.4147098480789651E-01, 1.0000000000000000E+00, 8.4147098480789651E-01,
        4.5464871341284085E-01, 4.7040002686622407E-02, -1.8920062382698206E-01, -1.9178485493262769E-01,
        -4.6569249699820979E-02, 9.3855228388398442E-02, 1.2366978082792272E-01, 4.5790942804639619E-02,
        -5.4402111088936981E-02, -9.0908200595518496E-02, -4.4714409833369581E-02, 3.2320541294356994E-02,
        7.0757668263919308E-02, 4.3352522677141124E-02};

    nd::array vals = nd::make_strided_array(2, 21, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = sph_j0;

    return vals;
}

inline nd::array sph_bessel_j1_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double sph_j1[21] = {9.5089408079170792E-02, -1.1611074925915746E-01, -3.4567749976235596E-01,
        -4.3539777497999162E-01, -3.0116867893975679E-01, 0.0000000000000000E+00, 3.0116867893975679E-01,
        4.3539777497999162E-01, 3.4567749976235596E-01, 1.1611074925915746E-01, -9.5089408079170792E-02,
        -1.6778992272503117E-01, -9.4292432279272314E-02, 3.3646226829567031E-02, 1.0632457829881296E-01,
        7.8466941798751547E-02, -8.6667180530517529E-03, -7.4047364047155140E-02, -6.7317403088910709E-02,
        -4.7128249959938776E-03, 5.3536029035730827E-02};

    nd::array vals = nd::make_strided_array(2, 21, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = sph_j1;

    return vals;
}

inline nd::array riccati_bessel_j0_vals() {
    nd::array vals = sph_bessel_j0_vals();
    vals(1).vals() = vals(0) * vals(1);

    return vals;
}

inline nd::array riccati_bessel_j1_vals() {
    nd::array vals = sph_bessel_j1_vals();
    vals(1).vals() = vals(0) * vals(1);

    return vals;
}

inline nd::array struve_vals() {
    static double nu[28] = {0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00,
        0.50E+00, 0.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 2.50E+00,
        2.50E+00, 2.50E+00, 2.50E+00, 2.50E+00, 1.25E+00, 1.25E+00, 1.25E+00, 1.25E+00,
        1.25E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00};
    static double x[28] = {0.2E+00, 1.0E+00, 2.0E+00, 2.5E+00, 3.0E+00, 5.0E+00, 10.0E+00,
        20.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00,
        10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00,
        5.0E+00, 10.0E+00, 50.0E+00};
    static double h[28] = {3.556369919089484E-02, 3.667856927844893E-01, 7.989752939540048E-01,
        9.089048066430889E-01, 9.167076867564139E-01, 2.556071140454458E-01, 4.640221185334337E-01,
        1.056055068302153E-01, 9.433126604411887E-02, 4.506610939629309E-01, 1.285351465683636E+00,
        1.445232208618471E+00, 2.850632812834886E+00, 1.594367544822548E-02, 1.591111387642697E-01,
        1.630681337960218E+00, 3.123463196577309E+00, 3.542893378014585E+01, 1.387834367475080E-01,
        5.485850568068681E-01, 1.065456909905908E+00, 1.148981565109621E+00, 1.357703753487927E+00,
        9.733189747887699E-03, 1.163858011885388E-01, 1.588475113924109E+00, 3.659976606179626E+00,
        6.206532972532083E+01};

    nd::array vals = nd::make_strided_array(3, 28, ndt::make_type<double>());
    vals(0).vals() = nu;
    vals(1).vals() = x;
    vals(2).vals() = h;

    return vals;
}

} // namespace dynd

#endif // _DYND__SPECIAL_VALS_HPP_
