//
// Copyright (C) 2011-14 Irwin Zaid, DyND Developers
// BSD 2-Clause License, see LICENSE.txt
//

#ifndef _DYND__SPECIAL_VALS_HPP_
#define _DYND__SPECIAL_VALS_HPP_

#include <dynd/array.hpp>
#include <dynd/types/tuple_type.hpp>

namespace dynd {

inline nd::array airy_vals() {
    static double x[11] = {0.0E+00, 0.1E+00, 0.2E+00, 0.3E+00, 0.4E+00, 0.5E+00, 0.6E+00,
        0.7E+00, 0.8E+00, 0.9E+00, 1.0E+00};
    static double ai[11] = {0.3550280538878172E+00, 0.3292031299435381E+00, 0.3037031542863820E+00,
        0.2788064819550049E+00, 0.2547423542956763E+00, 0.2316936064808335E+00, 0.2098000616663795E+00,
        0.1891624003981501E+00, 0.1698463174443649E+00, 0.1518868036405444E+00, 0.1352924163128814E+00};
    static double aip[11] = {-0.2588194037928068E+00, -0.2571304219075862E+00, -0.2524054702856195E+00,
        -0.2451463642190548E+00, -0.2358320344192082E+00, -0.2249105326646839E+00, -0.2127932593891585E+00,
        -0.1998511915822805E+00, -0.1864128638072717E+00, -0.1727638434616347E+00, -0.1591474412967932E+00};
    static double bi[11] = {0.6149266274460007E+00, 0.6598616901941892E+00, 0.7054642029186612E+00,
        0.7524855850873156E+00, 0.8017730000135972E+00, 0.8542770431031555E+00, 0.9110633416949405E+00,
        0.9733286558781659E+00, 0.1042422171231561E+01, 0.1119872813134447E+01, 0.1207423594952871E+01};
    static double bip[11] = {0.4482883573538264E+00, 0.4515126311496465E+00, 0.4617892843621509E+00,
        0.4800490287524480E+00, 0.5072816760506224E+00, 0.5445725641405923E+00, 0.5931444786342857E+00,
        0.6544059191721400E+00, 0.7300069016152518E+00, 0.8219038903072090E+00, 0.9324359333927756E+00};

    nd::array vals = nd::make_strided_array(5, 11, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = ai;
    vals(2).vals() = aip;
    vals(3).vals() = bi;
    vals(4).vals() = bip;

    return vals;
}


inline nd::array gamma_vals() {
    static double x[25] = {-0.50E+00, -0.01E+00, 0.01E+00, 0.10E+00, 0.20E+00, 0.40E+00,
        0.50E+00, 0.60E+00, 0.80E+00, 1.00E+00, 1.10E+00, 1.20E+00, 1.30E+00, 1.40E+00,
        1.50E+00, 1.60E+00, 1.70E+00, 1.80E+00, 1.90E+00, 2.00E+00, 3.00E+00, 4.00E+00,
        10.00E+00, 20.00E+00, 30.00E+00};
    static double ga[25] = {-0.3544907701811032E+01, -0.1005871979644108E+03, 0.9943258511915060E+02,
        0.9513507698668732E+01, 0.4590843711998803E+01, 0.2218159543757688E+01, 0.1772453850905516E+01,
        0.1489192248812817E+01, 0.1164229713725303E+01, 0.1000000000000000E+01, 0.9513507698668732E+00,
        0.9181687423997606E+00, 0.8974706963062772E+00, 0.8872638175030753E+00, 0.8862269254527580E+00,
        0.8935153492876903E+00, 0.9086387328532904E+00, 0.9313837709802427E+00, 0.9617658319073874E+00,
        0.1000000000000000E+01, 0.2000000000000000E+01, 0.6000000000000000E+01, 0.3628800000000000E+06,
        0.1216451004088320E+18, 0.8841761993739702E+31};

    nd::array vals = nd::make_strided_array(2, 25, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = ga;

    return vals;
}

inline nd::array lgamma_vals() {
    static double x[20] = {0.20E+00, 0.40E+00, 0.60E+00, 0.80E+00, 1.00E+00, 1.10E+00, 1.20E+00,
        1.30E+00, 1.40E+00, 1.50E+00, 1.60E+00, 1.70E+00, 1.80E+00, 1.90E+00, 2.00E+00, 3.00E+00,
        4.00E+00, 10.00E+00, 20.00E+00, 30.00E+00};
    static double lga[20] = {0.1524063822430784E+01, 0.7966778177017837E+00, 0.3982338580692348E+00,
        0.1520596783998375E+00, 0.0000000000000000E+00, -0.4987244125983972E-01, -0.8537409000331584E-01,
        -0.1081748095078604E+00, -0.1196129141723712E+00, -0.1207822376352452E+00, -0.1125917656967557E+00,
        -0.9580769740706586E-01, -0.7108387291437216E-01, -0.3898427592308333E-01, 0.00000000000000000E+00,
        0.69314718055994530E+00, 0.17917594692280550E+01, 0.12801827480081469E+02, 0.39339884187199494E+02,
        0.71257038967168009E+02};

    nd::array vals = nd::make_strided_array(2, 20, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = lga;

    return vals;
}

inline nd::array sph_bessel_j0_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double sph_j0[21] = {-1.9178485493262769E-01, -1.8920062382698206E-01, 4.7040002686622407E-02,
        4.5464871341284085E-01, 8.4147098480789651E-01, 1.0000000000000000E+00, 8.4147098480789651E-01,
        4.5464871341284085E-01, 4.7040002686622407E-02, -1.8920062382698206E-01, -1.9178485493262769E-01,
        -4.6569249699820979E-02, 9.3855228388398442E-02, 1.2366978082792272E-01, 4.5790942804639619E-02,
        -5.4402111088936981E-02, -9.0908200595518496E-02, -4.4714409833369581E-02, 3.2320541294356994E-02,
        7.0757668263919308E-02, 4.3352522677141124E-02};

    nd::array vals = nd::make_strided_array(2, 21, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = sph_j0;

    return vals;
}

inline nd::array sph_bessel_j1_vals() {
    static double x[21] = {-5.0E+00, -4.0E+00, -3.0E+00, -2.0E+00, -1.0E+00, 0.0E+00,
        1.0E+00, 2.0E+00, 3.0E+00, 4.0E+00, 5.0E+00, 6.0E+00, 7.0E+00, 8.0E+00, 9.0E+00,
        10.0E+00, 11.0E+00, 12.0E+00, 13.0E+00, 14.0E+00, 15.0E+00};
    static double sph_j1[21] = {9.5089408079170792E-02, -1.1611074925915746E-01, -3.4567749976235596E-01,
        -4.3539777497999162E-01, -3.0116867893975679E-01, 0.0000000000000000E+00, 3.0116867893975679E-01,
        4.3539777497999162E-01, 3.4567749976235596E-01, 1.1611074925915746E-01, -9.5089408079170792E-02,
        -1.6778992272503117E-01, -9.4292432279272314E-02, 3.3646226829567031E-02, 1.0632457829881296E-01,
        7.8466941798751547E-02, -8.6667180530517529E-03, -7.4047364047155140E-02, -6.7317403088910709E-02,
        -4.7128249959938776E-03, 5.3536029035730827E-02};

    nd::array vals = nd::make_strided_array(2, 21, ndt::make_type<double>());
    vals(0).vals() = x;
    vals(1).vals() = sph_j1;

    return vals;
}

inline nd::array riccati_bessel_j0_vals() {
    nd::array vals = sph_bessel_j0_vals();
    vals(1).vals() = vals(0) * vals(1);

    return vals;
}

inline nd::array riccati_bessel_j1_vals() {
    nd::array vals = sph_bessel_j1_vals();
    vals(1).vals() = vals(0) * vals(1);

    return vals;
}

inline nd::array struve_vals() {
    static double nu[28] = {0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00, 0.50E+00,
        0.50E+00, 0.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 1.50E+00, 2.50E+00,
        2.50E+00, 2.50E+00, 2.50E+00, 2.50E+00, 1.25E+00, 1.25E+00, 1.25E+00, 1.25E+00,
        1.25E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00, 2.75E+00};
    static double x[28] = {0.2E+00, 1.0E+00, 2.0E+00, 2.5E+00, 3.0E+00, 5.0E+00, 10.0E+00,
        20.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00,
        10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00, 5.0E+00, 10.0E+00, 50.0E+00, 1.0E+00, 2.0E+00,
        5.0E+00, 10.0E+00, 50.0E+00};
    static double h[28] = {3.556369919089484E-02, 3.667856927844893E-01, 7.989752939540048E-01,
        9.089048066430889E-01, 9.167076867564139E-01, 2.556071140454458E-01, 4.640221185334337E-01,
        1.056055068302153E-01, 9.433126604411887E-02, 4.506610939629309E-01, 1.285351465683636E+00,
        1.445232208618471E+00, 2.850632812834886E+00, 1.594367544822548E-02, 1.591111387642697E-01,
        1.630681337960218E+00, 3.123463196577309E+00, 3.542893378014585E+01, 1.387834367475080E-01,
        5.485850568068681E-01, 1.065456909905908E+00, 1.148981565109621E+00, 1.357703753487927E+00,
        9.733189747887699E-03, 1.163858011885388E-01, 1.588475113924109E+00, 3.659976606179626E+00,
        6.206532972532083E+01};

    nd::array vals = nd::make_strided_array(3, 28, ndt::make_type<double>());
    vals(0).vals() = nu;
    vals(1).vals() = x;
    vals(2).vals() = h;

    return vals;
}

} // namespace dynd

#endif // _DYND__SPECIAL_VALS_HPP_
